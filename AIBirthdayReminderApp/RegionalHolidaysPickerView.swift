//
//  RegionalHolidaysPickerView.swift
//  AIBirthdayReminderApp
//
//  Created by –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î—Ä–æ—Ç–µ–Ω–∫–æ on 25.06.2025.
//

import SwiftUI
import Foundation
// TODO: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ Holiday, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è: import Holiday

struct RegionalHolidaysPickerView: View {
    @Binding var isPresented: Bool
    var onAdd: ([Holiday]) -> Void

    @State private var selectedRegion: String = "–†–æ—Å—Å–∏—è"
    @State private var showProfessional: Bool = false
    @State private var selectedHolidays: Set<UUID> = []

    // –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π
    let regions = ["–†–æ—Å—Å–∏—è", "–°–®–ê", "–ú–æ–ª–¥–æ–≤–∞"]
    let regionalHolidays: [String: [Holiday]] = [
        "–†–æ—Å—Å–∏—è": [
            Holiday(title: "–î–µ–Ω—å –†–æ—Å—Å–∏–∏", date: Date(), type: .official, icon: "üá∑üá∫", isRegional: true, isCustom: false, relatedProfession: nil)
        ],
        "–°–®–ê": [
            Holiday(title: "–î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", date: Date(), type: .official, icon: "üá∫üá∏", isRegional: true, isCustom: false, relatedProfession: nil)
        ],
        "–ú–æ–ª–¥–æ–≤–∞": [
            Holiday(title: "–î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ú–æ–ª–¥–æ–≤—ã", date: Date(), type: .official, icon: "üá≤üá©", isRegional: true, isCustom: false, relatedProfession: nil)
        ]
    ]
    let professionalHolidays: [String: [Holiday]] = [
        "–†–æ—Å—Å–∏—è": [
            Holiday(title: "–î–µ–Ω—å –º–µ–¥–∏–∫–∞", date: Date(), type: .professional, icon: "ü©∫", isRegional: true, isCustom: false, relatedProfession: "–í—Ä–∞—á")
        ],
        "–°–®–ê": [
            Holiday(title: "–î–µ–Ω—å —É—á–∏—Ç–µ–ª—è", date: Date(), type: .professional, icon: "üçé", isRegional: true, isCustom: false, relatedProfession: "–£—á–∏—Ç–µ–ª—å")
        ],
        "–ú–æ–ª–¥–æ–≤–∞": [
            Holiday(title: "–î–µ–Ω—å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞", date: Date(), type: .professional, icon: "üßÆ", isRegional: true, isCustom: false, relatedProfession: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä")
        ]
    ]
    // TODO: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤

    var body: some View {
        NavigationStack {
            Form {
                Picker("–†–µ–≥–∏–æ–Ω", selection: $selectedRegion) {
                    ForEach(regions, id: \.self) { region in
                        Text(region).tag(region)
                    }
                }
                Section(header: Text("–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞")) {
                    ForEach(regionalHolidays[selectedRegion] ?? []) { holiday in
                        HStack {
                            Toggle(isOn: Binding(
                                get: { selectedHolidays.contains(holiday.id) },
                                set: { isSelected in
                                    if isSelected {
                                        selectedHolidays.insert(holiday.id)
                                    } else {
                                        selectedHolidays.remove(holiday.id)
                                    }
                                }
                            )) {
                                Label(holiday.title, systemImage: holiday.icon ?? "calendar")
                            }
                        }
                    }
                }
                Toggle("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏", isOn: $showProfessional)
                if showProfessional {
                    Section(header: Text("–ü—Ä–æ—Ñ. –ø—Ä–∞–∑–¥–Ω–∏–∫–∏")) {
                        ForEach(professionalHolidays[selectedRegion] ?? []) { holiday in
                            HStack {
                                Toggle(isOn: Binding(
                                    get: { selectedHolidays.contains(holiday.id) },
                                    set: { isSelected in
                                        if isSelected {
                                            selectedHolidays.insert(holiday.id)
                                        } else {
                                            selectedHolidays.remove(holiday.id)
                                        }
                                    }
                                )) {
                                    Label(holiday.title, systemImage: holiday.icon ?? "calendar")
                                }
                            }
                        }
                    }
                }
            }
            .navigationTitle("–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("–û—Ç–º–µ–Ω–∞") { isPresented = false }
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button("–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ") {
                        let regionHols = regionalHolidays[selectedRegion] ?? []
                        let profHols = showProfessional ? (professionalHolidays[selectedRegion] ?? []) : []
                        let allHolidays = (regionHols + profHols).filter { selectedHolidays.contains($0.id) }
                        onAdd(allHolidays)
                        isPresented = false
                    }.disabled(selectedHolidays.isEmpty)
                }
            }
        }
    }
}
