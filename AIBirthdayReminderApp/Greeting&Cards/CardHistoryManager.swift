import UIKit
import CoreData

struct CardHistoryItemWithImage {
    let id: UUID
    let date: Date
    let cardID: String
    let image: UIImage?
}

@MainActor
final class CardHistoryManager {
    private static var viewContext: NSManagedObjectContext {
        CoreDataManager.shared.viewContext
    }

    /// –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –≤ Core Data
    static func addCard(item: CardHistoryItem, image: UIImage, for contactId: UUID, completion: (() -> Void)? = nil) {
        CoreDataManager.shared.performBackgroundTask(author: "addCard") { ctx in
            let request: NSFetchRequest<ContactEntity> = ContactEntity.fetchRequest()
            request.fetchLimit = 1
            request.predicate = NSPredicate(format: "id == %@", contactId as CVarArg)

            do {
                guard let contact = try ctx.fetch(request).first else {
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —Å id: \(contactId)")
                    return
                }

                // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ id
                let byId: NSFetchRequest<CardHistoryEntity> = CardHistoryEntity.fetchRequest()
                byId.fetchLimit = 1
                byId.predicate = NSPredicate(format: "id == %@", item.id as CVarArg)

                // –ï—Å–ª–∏ –ø–æ id –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ (contact + –¥–µ–Ω—å(date) + cardID)
                let day = Calendar.current.startOfDay(for: item.date)
                let nextDay = Calendar.current.date(byAdding: .day, value: 1, to: day)!
                let byContactCardAndDay: NSFetchRequest<CardHistoryEntity> = CardHistoryEntity.fetchRequest()
                byContactCardAndDay.fetchLimit = 1
                byContactCardAndDay.predicate = NSCompoundPredicate(andPredicateWithSubpredicates: [
                    NSPredicate(format: "contact == %@", contact),
                    NSPredicate(format: "cardID == %@", item.cardID),
                    NSPredicate(format: "date >= %@ AND date < %@", day as NSDate, nextDay as NSDate)
                ])

                let entity: CardHistoryEntity
                if let found = try ctx.fetch(byId).first {
                    entity = found
                } else if let dup = try ctx.fetch(byContactCardAndDay).first {
                    entity = dup
                    if entity.id == nil { entity.id = item.id }
                } else {
                    let e = CardHistoryEntity(context: ctx)
                    e.id = item.id
                    entity = e
                }
                entity.date = item.date
                entity.cardID = item.cardID
                // JPEG –æ–±—ã—á–Ω–æ –∑–∞–º–µ—Ç–Ω–æ –º–µ–Ω—å—à–µ PNG. –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º Allows External Storage –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ —É–π–¥—É—Ç –≤ CKAsset.
                entity.imageData = image.jpegData(compressionQuality: 0.85)
                if let data = entity.imageData {
                    print("üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ imageData, —Ä–∞–∑–º–µ—Ä: \(data.count) –±–∞–π—Ç (JPEG 0.85)")
                } else {
                    print("‚ö†Ô∏è imageData –ø–æ–ª—É—á–∏–ª–æ—Å—å nil")
                }
                entity.contact = contact
                print("üß© –ü—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É: \(contact.id?.uuidString ?? "nil")")
            } catch {
                assertionFailure("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏: \(error)")
            }
            do {
                try ctx.save()
                print("‚úÖ Core Data: bgContext(addCard) —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                if let completion = completion {
                    Task { @MainActor in completion() }
                }
            } catch {
                assertionFailure("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É (addCard): \(error)")
            }
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    static func getCards(for contactId: UUID) -> [CardHistoryItemWithImage] {
        let request: NSFetchRequest<CardHistoryEntity> = CardHistoryEntity.fetchRequest()
        request.predicate = NSPredicate(format: "contact.id == %@", contactId as CVarArg)
        request.sortDescriptors = [NSSortDescriptor(keyPath: \CardHistoryEntity.date, ascending: false)]
        request.fetchBatchSize = 50

        do {
            let results = try viewContext.fetch(request)
            
            return results.map {
                CardHistoryItemWithImage(
                    id: $0.id ?? UUID(),
                    date: $0.date ?? .distantPast,
                    cardID: $0.cardID ?? "",
                    image: $0.imageData.flatMap { UIImage(data: $0) }
                )
            }
        } catch {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫–∏: \(error)")
            return []
        }
    }

    /// –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫—É (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É)
    static func addCardForHoliday(item: CardHistoryItem, image: UIImage, holidayId: UUID, completion: (() -> Void)? = nil) {
        CoreDataManager.shared.performBackgroundTask(author: "addCardHoliday") { ctx in
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ id, –∑–∞—Ç–µ–º –¥–µ–¥—É–ø –ø–æ (holidayID + –¥–µ–Ω—å(date) + cardID)
            let byId: NSFetchRequest<CardHistoryEntity> = CardHistoryEntity.fetchRequest()
            byId.fetchLimit = 1
            byId.predicate = NSPredicate(format: "id == %@", item.id as CVarArg)

            let day = Calendar.current.startOfDay(for: item.date)
            let nextDay = Calendar.current.date(byAdding: .day, value: 1, to: day)!
            let byHolidayCardAndDay: NSFetchRequest<CardHistoryEntity> = CardHistoryEntity.fetchRequest()
            byHolidayCardAndDay.fetchLimit = 1
            byHolidayCardAndDay.predicate = NSCompoundPredicate(andPredicateWithSubpredicates: [
                NSPredicate(format: "holidayID == %@", holidayId as CVarArg),
                NSPredicate(format: "cardID == %@", item.cardID),
                NSPredicate(format: "date >= %@ AND date < %@", day as NSDate, nextDay as NSDate)
            ])

            let entity: CardHistoryEntity
            if let found = (try? ctx.fetch(byId))?.first {
                entity = found
            } else if let dup = (try? ctx.fetch(byHolidayCardAndDay))?.first {
                entity = dup
                if entity.id == nil { entity.id = item.id }
            } else {
                let e = CardHistoryEntity(context: ctx)
                e.id = item.id
                entity = e
            }
            entity.date = item.date
            entity.cardID = item.cardID
            entity.holidayID = holidayId // <-- –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª–∏ Core Data
            entity.imageData = image.jpegData(compressionQuality: 0.85)
            if let data = entity.imageData {
                print("üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ imageData, —Ä–∞–∑–º–µ—Ä: \(data.count) –±–∞–π—Ç (JPEG 0.85)")
            } else {
                print("‚ö†Ô∏è imageData –ø–æ–ª—É—á–∏–ª–æ—Å—å nil")
            }
            // –Ø–≤–Ω–æ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
            entity.contact = nil
            do {
                try ctx.save()
                print("‚úÖ Core Data: bgContext(addCardHoliday) —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                if let completion = completion {
                    Task { @MainActor in completion() }
                }
            } catch {
                assertionFailure("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É (addCardForHoliday): \(error)")
            }
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    static func getCards(forHoliday holidayId: UUID) -> [CardHistoryItemWithImage] {
        let request: NSFetchRequest<CardHistoryEntity> = CardHistoryEntity.fetchRequest()
        request.predicate = NSPredicate(format: "holidayID == %@", holidayId as CVarArg)
        request.sortDescriptors = [NSSortDescriptor(keyPath: \CardHistoryEntity.date, ascending: false)]
        request.fetchBatchSize = 50

        do {
            let results = try viewContext.fetch(request)
           
            return results.map {
                CardHistoryItemWithImage(
                    id: $0.id ?? UUID(),
                    date: $0.date ?? .distantPast,
                    cardID: $0.cardID ?? "",
                    image: $0.imageData.flatMap { UIImage(data: $0) }
                )
            }
        } catch {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫–∏ –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫—É: \(error)")
            return []
        }
    }

    

    /// –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –ø–æ id
    static func deleteCard(_ id: UUID) {
        CoreDataManager.shared.performBackgroundTask(author: "deleteCard") { ctx in
            let request: NSFetchRequest<CardHistoryEntity> = CardHistoryEntity.fetchRequest()
            request.fetchLimit = 1
            
            request.predicate = NSPredicate(format: "id == %@", id as CVarArg)
            
            do {
                if let entity = try ctx.fetch(request).first {
                    print("üóëÔ∏è ‚úÖ –û—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: \(id)")
                    ctx.delete(entity)
                    try ctx.save()
                    print("üóë –û—Ç–∫—Ä—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: \(id)")
                } else {
                    print("üóëÔ∏è ‚ùå –û—Ç–∫—Ä—ã—Ç–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: \(id)")
                }
            } catch {
                assertionFailure("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: \(error)")
            }
        }
    }

    // MARK: - Helpers
    private static func fetchCard(by id: UUID, in ctx: NSManagedObjectContext) throws -> CardHistoryEntity? {
        let req: NSFetchRequest<CardHistoryEntity> = CardHistoryEntity.fetchRequest()
        req.fetchLimit = 1
        req.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        return try ctx.fetch(req).first
    }
}
