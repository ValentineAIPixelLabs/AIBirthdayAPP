import Foundation
import UIKit

final class ChatGPTService {
    static let shared = ChatGPTService()
    private let endpoint = "https://api.openai.com/v1/chat/completions"
    private let model = "gpt-3.5-turbo"
    
    private init() {}

    // MARK: - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è

    // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: –±–µ–∑ appleId –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ AppleSignInManager
    func generateGreeting(for contact: Contact, completion: @escaping (Result<String, Error>) -> Void) {
        // 1. –§–æ—Ä–º–∏—Ä—É–µ–º prompt –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        var ageString = ""
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year {
            let age = currentYear - year
            ageString = "–í–æ–∑—Ä–∞—Å—Ç: \(age)"
        }

        var promptLines = ["–°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:"]
        promptLines.append("")
        promptLines.append("–ò–º—è: \(contact.name),")
        if let nickname = contact.nickname, !nickname.isEmpty { promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname),") }
        if !ageString.isEmpty { promptLines.append("\(ageString),") }
        if let relation = contact.relationType, !relation.isEmpty { promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation),") }
        if let occupation = contact.occupation, !occupation.isEmpty { promptLines.append("–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(occupation),") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { promptLines.append("–£–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏: \(hobbies),") }
        if let leisure = contact.leisure, !leisure.isEmpty { promptLines.append("–ö–∞–∫ –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: \(leisure),") }
        if let info = contact.additionalInfo, !info.isEmpty { promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(info),") }
        var birthdayLine = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: "
        if let birthday = contact.birthday,
           let day = birthday.day,
           let month = birthday.month {
            birthdayLine += "\(day).\(month)"
            if let year = birthday.year { birthdayLine += ".\(year)" }
        }
        promptLines.append("\(birthdayLine),")
        promptLines.append("")
        promptLines.append("""
–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è \(contact.relationType ?? "—á–µ–ª–æ–≤–µ–∫–∞"). –°—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–º–µ—Å—Ç–Ω—ã–º: –µ—Å–ª–∏ —ç—Ç–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ‚Äî –±–æ–ª–µ–µ —Ç–µ–ø–ª–æ, –µ—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –±–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–æ –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç, –∫–æ–ª–ª–µ–≥–∞, —Ç–æ–≤–∞—Ä–∏—â - —Ç–∞–∫–∂–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –Ω–µ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ, –µ—Å–ª–∏ –¥—Ä—É–≥ ‚Äî –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–∏—à–∫–æ–º —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –º–∞–ª–æ–∑–Ω–∞–∫–æ–º—ã—Ö –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "—Ç—ã" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
""")
        promptLines.append("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ.")
        let prompt = promptLines.joined(separator: "\n")
        
        // 2. –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ —Å–≤–æ–µ–º—É —Å–µ—Ä–≤–µ—Ä—É
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AppleSignInManager
        guard let token = AppleSignInManager.shared.currentJWTToken else {
            completion(.failure(NSError(domain: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", code: -401)))
            return
        }
        guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate") else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        // –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º apple_id –≤ body
        let body: [String: Any] = [
            "prompt": prompt,
            "type": "birthday"
        ]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error)); return
        }
        // –î–æ–±–∞–≤–ª—è–µ–º Authorization: Bearer <—Ç–æ–∫–µ–Ω>
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error { completion(.failure(error)); return }
            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1))); return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let success = json["success"] as? Bool, success,
                   let result = json["result"] as? String {
                    completion(.success(result.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let errorMsg = json["error"] as? String {
                    completion(.failure(NSError(domain: errorMsg, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
    
    // MARK: - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ (prompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–æ View!)
    // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: –±–µ–∑ appleId –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ AppleSignInManager
    func generateCard(for contact: Contact, prompt: String, quality: String, referenceImage: UIImage? = nil, size: String, completion: @escaping () -> Void) {
        let finalPrompt = prompt
        print("üß† Final image prompt: \n\(finalPrompt)")
        var referenceImageData: Data? = nil
        if let referenceImage = referenceImage,
           let imageData = referenceImage.jpegData(compressionQuality: 0.92) {
            referenceImageData = imageData
        }
        self.requestImageGeneration(prompt: finalPrompt, contactId: contact.id, quality: quality, referenceImageData: referenceImageData, size: size, completion: completion)
    }

    // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: –±–µ–∑ appleId –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ AppleSignInManager
    private func requestImageGeneration(prompt: String, contactId: UUID, quality: String, referenceImageData: Data? = nil, size: String, completion: @escaping () -> Void) {
        guard let token = AppleSignInManager.shared.currentJWTToken else {
            DispatchQueue.main.async {
                showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                completion()
            }
            return
        }
        guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate_card_image") else { return }
        var request = URLRequest(url: url)
        request.timeoutInterval = 240
        request.httpMethod = "POST"

        let boundary = "Boundary-\(UUID().uuidString)"
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        // –î–æ–±–∞–≤–ª—è–µ–º Authorization: Bearer <—Ç–æ–∫–µ–Ω>
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("prompt:", prompt)
        print("quality:", quality)
        print("size:", size)
        print("referenceImageData size:", referenceImageData?.count ?? 0)

        var body = Data()

        // prompt
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"prompt\"\r\n\r\n".data(using: .utf8)!)
        body.append(prompt.data(using: .utf8)!)
        body.append("\r\n".data(using: .utf8)!)

        // quality
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"quality\"\r\n\r\n".data(using: .utf8)!)
        body.append(quality.data(using: .utf8)!)
        body.append("\r\n".data(using: .utf8)!)

        // size
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"size\"\r\n\r\n".data(using: .utf8)!)
        body.append(size.data(using: .utf8)!)
        body.append("\r\n".data(using: .utf8)!)

        // reference (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if let referenceImageData = referenceImageData {
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"reference\"; filename=\"reference.jpg\"\r\n".data(using: .utf8)!)
            body.append("Content-Type: image/jpeg\r\n\r\n".data(using: .utf8)!)
            body.append(referenceImageData)
            body.append("\r\n".data(using: .utf8)!)
        }

        body.append("--\(boundary)--\r\n".data(using: .utf8)!)
        request.httpBody = body

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                DispatchQueue.main.async {
                    showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
                    completion()
                }
                return
            }
            guard let data = data else {
                DispatchQueue.main.async {
                    showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    completion()
                }
                return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let success = json["success"] as? Bool, success,
                   let base64String = json["image"] as? String,
                   let imageData = Data(base64Encoded: base64String),
                   let image = UIImage(data: imageData) {
                    // JPEG –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                    let jpegData = image.jpegData(compressionQuality: 0.92)
                    let imageToSave = jpegData.flatMap { UIImage(data: $0) } ?? image
                    let newCardId = UUID()
                    let newCard = CardHistoryItem(id: newCardId, date: Date(), cardID: newCardId.uuidString)
                    CardHistoryManager.addCard(item: newCard, image: imageToSave, for: contactId)
                    DispatchQueue.main.async { completion() }
                    return
                } else {
                    DispatchQueue.main.async {
                        showAlert(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                        completion()
                    }
                    return
                }
            } catch {
                DispatchQueue.main.async {
                    showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
                    completion()
                }
            }
        }
        task.resume()
    }
    
    // MARK: - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º (–±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
    func generateHolidayGreeting(for holidayTitle: String, apiKey: String, completion: @escaping (Result<String, Error>) -> Void) {
        let prompt = """
        –°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, –¥—É—à–µ–≤–Ω–æ–µ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º "\(holidayTitle)" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ —É–∫–∞–∑—ã–≤–∞–π –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –∫–æ–ª–ª–µ–≥–∏, –∑–Ω–∞–∫–æ–º–æ–≥–æ, –¥—Ä—É–≥–∞). –°—Ç–∏–ª—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–∫.
        –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ.
        """
        let messages: [[String: String]] = [
            ["role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω—ã–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –ù–µ –æ–±—Ä—ã–≤–∞–π –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ."],
            ["role": "user", "content": prompt]
        ]
        guard let url = URL(string: endpoint) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }
        var request = URLRequest(url: url)
        request.timeoutInterval = 240
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        let body: [String: Any] = [
            "model": model,
            "messages": messages,
            "max_tokens": 600,
            "temperature": 0.8
        ]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error)); return
        }
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error { completion(.failure(error)); return }
            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1))); return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(.success(content.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    completion(.failure(NSError(domain: message, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
    
    // MARK: - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    func generateHolidayGreeting(for contact: Contact, holidayTitle: String, apiKey: String, completion: @escaping (Result<String, Error>) -> Void) {
        var promptLines = ["–°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º \"\(holidayTitle)\" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n"]
        promptLines.append("–ò–º—è: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty { promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname)") }
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year { promptLines.append("–í–æ–∑—Ä–∞—Å—Ç: \(currentYear - year)") }
        if let relation = contact.relationType, !relation.isEmpty { promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation)") }
        if let occupation = contact.occupation, !occupation.isEmpty { promptLines.append("–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(occupation)") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { promptLines.append("–£–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏: \(hobbies)") }
        if let leisure = contact.leisure, !leisure.isEmpty { promptLines.append("–ö–∞–∫ –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: \(leisure)") }
        if let info = contact.additionalInfo, !info.isEmpty { promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(info)") }
        var birthdayLine = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: "
        if let birthday = contact.birthday,
           let day = birthday.day,
           let month = birthday.month {
            birthdayLine += "\(day).\(month)"
            if let year = birthday.year { birthdayLine += ".\(year)" }
        }
        promptLines.append(birthdayLine)
        promptLines.append("""
        
–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ (—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ‚Äî —Ç–µ–ø–ª–æ, –Ω–∞—á–∞–ª—å–Ω–∏–∫ ‚Äî —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–≥ ‚Äî –æ—Ç–∫—Ä—ã—Ç–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Ç.–¥.) –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∞ "—Ç—ã", –µ—Å–ª–∏ –Ω–µ —É–º–µ—Å—Ç–Ω–æ. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ.
""")
        let prompt = promptLines.joined(separator: "\n")
        let messages: [[String: String]] = [
            ["role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω—ã–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."],
            ["role": "user", "content": prompt]
        ]
        guard let url = URL(string: endpoint) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }
        var request = URLRequest(url: url)
        request.timeoutInterval = 240
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        let body: [String: Any] = [
            "model": model,
            "messages": messages,
            "max_tokens": 600,
            "temperature": 0.8
        ]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error)); return
        }
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error { completion(.failure(error)); return }
            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1))); return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(.success(content.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    completion(.failure(NSError(domain: message, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }

    // MARK: - –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ (–Ω–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: –±–µ–∑ appleId –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ AppleSignInManager
    func generateCreativePrompt(for contact: Contact, completion: @escaping (Result<String, Error>) -> Void) {
        var infoLines = [String]()
        infoLines.append("Name: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty { infoLines.append("Nickname: \(nickname)") }
        if let gender = contact.gender, !gender.isEmpty { infoLines.append("Gender: \(gender)") }
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year { infoLines.append("Age: \(currentYear - year)") }
        if let relation = contact.relationType, !relation.isEmpty { infoLines.append("Relation type: \(relation)") }
        if let occupation = contact.occupation, !occupation.isEmpty { infoLines.append("Occupation: \(occupation)") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { infoLines.append("Hobbies: \(hobbies)") }
        if let leisure = contact.leisure, !leisure.isEmpty { infoLines.append("Leisure: \(leisure)") }
        if let info = contact.additionalInfo, !info.isEmpty { infoLines.append("Additional Info: \(info)") }
        let infoBlock = infoLines.joined(separator: "\n")

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AppleSignInManager
        guard let token = AppleSignInManager.shared.currentJWTToken else {
            completion(.failure(NSError(domain: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", code: -401)))
            return
        }
        guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate_card_prompt") else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1))); return
        }
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        // –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º apple_id –≤ body
        let body: [String: Any] = [
            "info_block": infoBlock
        ]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error)); return
        }
        // –î–æ–±–∞–≤–ª—è–µ–º Authorization: Bearer <—Ç–æ–∫–µ–Ω>
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error { completion(.failure(error)); return }
            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1))); return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let success = json["success"] as? Bool, success,
                   let result = json["result"] as? String {
                    completion(.success(result.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let errorMsg = json["error"] as? String {
                    completion(.failure(NSError(domain: errorMsg, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
}

// MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ UIAlert –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
private func showAlert(title: String, message: String) {
    if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
       let root = scene.windows.first?.rootViewController {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        root.present(alert, animated: true)
    }
}
