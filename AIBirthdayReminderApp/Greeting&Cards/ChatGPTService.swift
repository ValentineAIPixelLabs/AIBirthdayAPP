import Foundation
import UIKit

final class ChatGPTService {
    static let shared = ChatGPTService()
    private let endpoint = "https://api.openai.com/v1/chat/completions"
    private let model = "gpt-3.5-turbo"

    private init() {}

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞
    func generateGreeting(for contact: Contact, apiKey: String, completion: @escaping (Result<String, Error>) -> Void) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
        var ageString = ""
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year {
            let age = currentYear - year
            ageString = "–í–æ–∑—Ä–∞—Å—Ç: \(age)"
        } else {
            ageString = ""
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ prompt –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞–Ω–Ω—ã—Ö
        var promptLines = ["–°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n"]
        promptLines.append("–ò–º—è: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty {
            promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname)")
        }
        if !ageString.isEmpty {
            promptLines.append(ageString)
        }
        if let relation = contact.relationType, !relation.isEmpty {
            promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation)")
        }
        if let occupation = contact.occupation, !occupation.isEmpty {
            promptLines.append("–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(occupation)")
        }
        if let hobbies = contact.hobbies, !hobbies.isEmpty {
            promptLines.append("–£–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏: \(hobbies)")
        }
        if let leisure = contact.leisure, !leisure.isEmpty {
            promptLines.append("–ö–∞–∫ –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: \(leisure)")
        }
        if let info = contact.additionalInfo, !info.isEmpty {
            promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(info)")
        }
        var birthdayLine = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: "
        if let birthday = contact.birthday,
           let day = birthday.day,
           let month = birthday.month {
            birthdayLine += "\(day).\(month)"
            if let year = birthday.year {
                birthdayLine += ".\(year)"
            }
        }
        promptLines.append(birthdayLine)

        promptLines.append("""
        
–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è \(contact.relationType ?? "—á–µ–ª–æ–≤–µ–∫–∞"). –°—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–º–µ—Å—Ç–Ω—ã–º: –µ—Å–ª–∏ —ç—Ç–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ‚Äî –±–æ–ª–µ–µ —Ç–µ–ø–ª–æ, –µ—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –±–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–æ –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç, –∫–æ–ª–ª–µ–≥–∞, —Ç–æ–≤–∞—Ä–∏—â—å - —Ç–∞–∫–∂–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –Ω–µ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ,  –µ—Å–ª–∏ –¥—Ä—É–≥ ‚Äî –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏   –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–∏—à–∫–æ–º —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –º–∞–ª–æ–∑–Ω–∞–∫–æ–º—ã—Ö –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "—Ç—ã" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
""")
        promptLines.append("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ.")

        let prompt = promptLines.joined(separator: "\n")

        let messages: [[String: String]] = [
            ["role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω—ã–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –ù–µ –æ–±—Ä—ã–≤–∞–π –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –º—ã—Å–ª—å –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ."],
            ["role": "user", "content": prompt]
        ]

        guard let url = URL(string: endpoint) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }

        var request = URLRequest(url: url)
        request.timeoutInterval = 240 // 4 –º–∏–Ω—É—Ç—ã
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let body: [String: Any] = [
            "model": model,
            "messages": messages,
            "max_tokens": 600,
            "temperature": 0.8
        ]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error))
            return
        }

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1)))
                return
            }

            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(.success(content.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    completion(.failure(NSError(domain: message, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }

        task.resume()
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.
    /// –¢–µ–ø–µ—Ä—å prompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–æ View, –∞ —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
    func generateCard(for contact: Contact, prompt: String, apiKey: String, quality: String, referenceImage: UIImage? = nil, size: String, completion: @escaping () -> Void) {
//        let description = """
//        Name: \(contact.name)
//        Gender: \(contact.gender ?? "")
//        Nickname: \(contact.nickname ?? "")
//        Age: \(Calendar.current.component(.year, from: Date()) - (contact.birthday?.year ?? Calendar.current.component(.year, from: Date())))
//        Occupation: \(contact.occupation ?? "")
//        Hobbies: \(contact.hobbies ?? "")
//        Leisure: \(contact.leisure ?? "")
//        Additional Info: \(contact.additionalInfo ?? "")
//        """
//
//        let finalPrompt = """
//        A cute cartoonish personage with a thin outline is the main character of a birthday illustration. The phrase ‚Äú–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!‚Äù in Cyrillic should be clearly visible at the top of the image with enough margin so it is not cut off. \(description) The background is a warm textured cream tone. Around the  personage are colorful and playful confetti in warm shades, conveying a festive and harmonious atmosphere. No people, no faces, no text, no words, no letters or symbols.
//        """

        let finalPrompt = prompt

        print("üß† Final image prompt: \n\(finalPrompt)")

        var referenceImageData: Data? = nil
        if let referenceImage = referenceImage,
           let imageData = referenceImage.jpegData(compressionQuality: 0.92) {
            referenceImageData = imageData
        }

        self.requestImageGeneration(prompt: finalPrompt, apiKey: apiKey, contactId: contact.id, quality: quality, referenceImageData: referenceImageData, size: size, completion: completion)
    }

    private func requestImageGeneration(prompt: String, apiKey: String, contactId: UUID, quality: String, referenceImageData: Data? = nil, size: String, completion: @escaping () -> Void) {
        if referenceImageData == nil {
            // –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
            guard let url = URL(string: "https://api.openai.com/v1/images/generations") else {
                return
            }
            var request = URLRequest(url: url)
            request.timeoutInterval = 240 // 4 –º–∏–Ω—É—Ç—ã
            request.httpMethod = "POST"
            request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")

            let body: [String: Any] = [
                "model": "gpt-image-1",
                "prompt": prompt,
                "n": 1,
                "size": size,
                "quality": quality
            ]

            do {
                request.httpBody = try JSONSerialization.data(withJSONObject: body)
            } catch {
                print("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error)")
                DispatchQueue.main.async {
                    let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription, preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                    if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                       let root = scene.windows.first?.rootViewController {
                        root.present(alert, animated: true)
                    }
                    completion()
                }
                return
            }

            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    print("–û—à–∏–±–∫–∞ dataTask: \(error)")
                    DispatchQueue.main.async {
                        let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription, preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                           let root = scene.windows.first?.rootViewController {
                            root.present(alert, animated: true)
                        }
                        completion()
                    }
                    return
                }
                guard let data = data else {
                    print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç OpenAI")
                    DispatchQueue.main.async {
                        let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç OpenAI", preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                           let root = scene.windows.first?.rootViewController {
                            root.present(alert, animated: true)
                        }
                        completion()
                    }
                    return
                }

                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                        if let dataArr = json["data"] as? [[String: Any]],
                           let base64String = dataArr.first?["b64_json"] as? String,
                           let imageData = Data(base64Encoded: base64String),
                           let image = UIImage(data: imageData) {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 0.92, —á—Ç–æ–±—ã –±—ã–ª–æ, –∫–∞–∫ –∏ –ø—Ä–∏ reference
                            if let jpegData = image.jpegData(compressionQuality: 0.92),
                               let jpegImage = UIImage(data: jpegData) {
                                let newCardId = UUID()
                                let newCard = CardHistoryItem(id: newCardId, date: Date(), cardID: newCardId.uuidString)
                                CardHistoryManager.addCard(item: newCard, image: jpegImage, for: contactId)
                            } else {
                                // Fallback, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ jpeg
                                let newCardId = UUID()
                                let newCard = CardHistoryItem(id: newCardId, date: Date(), cardID: newCardId.uuidString)
                                CardHistoryManager.addCard(item: newCard, image: image, for: contactId)
                            }
                            DispatchQueue.main.async {
                                completion()
                            }
                            return
                        } else {
                            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
                            DispatchQueue.main.async {
                                let alert = UIAlertController(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", preferredStyle: .alert)
                                alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                                if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                                   let root = scene.windows.first?.rootViewController {
                                    root.present(alert, animated: true)
                                }
                                completion()
                            }
                            return
                        }
                    }
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏
                    else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                              let error = json["error"] as? [String: Any],
                              let message = error["message"] as? String {
                        DispatchQueue.main.async {
                            let alert = UIAlertController(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: message, preferredStyle: .alert)
                            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                            if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                               let root = scene.windows.first?.rootViewController {
                                root.present(alert, animated: true)
                            }
                            completion()
                        }
                        return
                    } else {
                        DispatchQueue.main.async {
                            let alert = UIAlertController(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", preferredStyle: .alert)
                            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                            if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                               let root = scene.windows.first?.rootViewController {
                                root.present(alert, animated: true)
                            }
                            completion()
                        }
                        return
                    }
                } catch {
                    print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
                    DispatchQueue.main.async {
                        let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription, preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                           let root = scene.windows.first?.rootViewController {
                            root.present(alert, animated: true)
                        }
                        completion()
                    }
                    return
                }
            }
            task.resume()
        } else {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (image edit)
            guard let url = URL(string: "https://api.openai.com/v1/images/edits"),
                  let referenceImageData = referenceImageData else {
                return
            }
            var request = URLRequest(url: url)
            request.timeoutInterval = 240 // 4 –º–∏–Ω—É—Ç—ã
            request.httpMethod = "POST"
            request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")

            let boundary = "Boundary-\(UUID().uuidString)"
            request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
            var body = Data()

            // image
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"image\"; filename=\"reference.jpg\"\r\n".data(using: .utf8)!)
            body.append("Content-Type: image/jpeg\r\n\r\n".data(using: .utf8)!)
            body.append(referenceImageData)
            body.append("\r\n".data(using: .utf8)!)

            // prompt
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"prompt\"\r\n\r\n".data(using: .utf8)!)
            body.append(prompt.data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)

            // model
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"model\"\r\n\r\n".data(using: .utf8)!)
            body.append("gpt-image-1".data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)

            // n
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"n\"\r\n\r\n".data(using: .utf8)!)
            body.append("1".data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)

            // size
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"size\"\r\n\r\n".data(using: .utf8)!)
            body.append(size.data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)

            // quality
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"quality\"\r\n\r\n".data(using: .utf8)!)
            body.append(quality.data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)

            // Finish boundary
            body.append("--\(boundary)--\r\n".data(using: .utf8)!)
            request.httpBody = body

            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    print("–û—à–∏–±–∫–∞ dataTask: \(error)")
                    DispatchQueue.main.async {
                        let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription, preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                           let root = scene.windows.first?.rootViewController {
                            root.present(alert, animated: true)
                        }
                        completion()
                    }
                    return
                }
                guard let data = data else {
                    print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç OpenAI")
                    DispatchQueue.main.async {
                        let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç OpenAI", preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                           let root = scene.windows.first?.rootViewController {
                            root.present(alert, animated: true)
                        }
                        completion()
                    }
                    return
                }
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                        if let dataArr = json["data"] as? [[String: Any]],
                           let base64String = dataArr.first?["b64_json"] as? String,
                           let imageData = Data(base64Encoded: base64String),
                           let image = UIImage(data: imageData) {
                            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                            let newCardId = UUID()
                            let newCard = CardHistoryItem(id: newCardId, date: Date(), cardID: newCardId.uuidString)
                            CardHistoryManager.addCard(item: newCard, image: image, for: contactId)
                            DispatchQueue.main.async {
                                completion()
                            }
                            return
                        } else {
                            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
                            DispatchQueue.main.async {
                                let alert = UIAlertController(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", preferredStyle: .alert)
                                alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                                if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                                   let root = scene.windows.first?.rootViewController {
                                    root.present(alert, animated: true)
                                }
                                completion()
                            }
                            return
                        }
                    }
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏
                    else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                              let error = json["error"] as? [String: Any],
                              let message = error["message"] as? String {
                        DispatchQueue.main.async {
                            let alert = UIAlertController(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: message, preferredStyle: .alert)
                            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                            if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                               let root = scene.windows.first?.rootViewController {
                                root.present(alert, animated: true)
                            }
                            completion()
                        }
                        return
                    } else {
                        DispatchQueue.main.async {
                            let alert = UIAlertController(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", preferredStyle: .alert)
                            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                            if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                               let root = scene.windows.first?.rootViewController {
                                root.present(alert, animated: true)
                            }
                            completion()
                        }
                        return
                    }
                } catch {
                    print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
                    DispatchQueue.main.async {
                        let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription, preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                           let root = scene.windows.first?.rootViewController {
                            root.present(alert, animated: true)
                        }
                        completion()
                    }
                    return
                }
            }
            task.resume()
        }
    }
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º (–±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
    func generateHolidayGreeting(for holidayTitle: String, apiKey: String, completion: @escaping (Result<String, Error>) -> Void) {
        let prompt = """
        –°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, –¥—É—à–µ–≤–Ω–æ–µ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º "\(holidayTitle)" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ —É–∫–∞–∑—ã–≤–∞–π –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –∫–æ–ª–ª–µ–≥–∏, –∑–Ω–∞–∫–æ–º–æ–≥–æ, –¥—Ä—É–≥–∞). –°—Ç–∏–ª—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–∫.
        –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ.
        """

        let messages: [[String: String]] = [
            ["role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω—ã–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –ù–µ –æ–±—Ä—ã–≤–∞–π –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ."],
            ["role": "user", "content": prompt]
        ]

        guard let url = URL(string: endpoint) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }

        var request = URLRequest(url: url)
        request.timeoutInterval = 240 // 4 –º–∏–Ω—É—Ç—ã
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let body: [String: Any] = [
            "model": model,
            "messages": messages,
            "max_tokens": 600,
            "temperature": 0.8
        ]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error))
            return
        }

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1)))
                return
            }

            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(.success(content.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    completion(.failure(NSError(domain: message, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }

        task.resume()
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    func generateHolidayGreeting(for contact: Contact, holidayTitle: String, apiKey: String, completion: @escaping (Result<String, Error>) -> Void) {
        var promptLines = ["–°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º \"\(holidayTitle)\" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n"]
        promptLines.append("–ò–º—è: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty {
            promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname)")
        }
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year {
            let age = currentYear - year
            promptLines.append("–í–æ–∑—Ä–∞—Å—Ç: \(age)")
        }
        if let relation = contact.relationType, !relation.isEmpty {
            promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation)")
        }
        if let occupation = contact.occupation, !occupation.isEmpty {
            promptLines.append("–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(occupation)")
        }
        if let hobbies = contact.hobbies, !hobbies.isEmpty {
            promptLines.append("–£–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏: \(hobbies)")
        }
        if let leisure = contact.leisure, !leisure.isEmpty {
            promptLines.append("–ö–∞–∫ –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: \(leisure)")
        }
        if let info = contact.additionalInfo, !info.isEmpty {
            promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(info)")
        }
        var birthdayLine = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: "
        if let birthday = contact.birthday,
           let day = birthday.day,
           let month = birthday.month {
            birthdayLine += "\(day).\(month)"
            if let year = birthday.year {
                birthdayLine += ".\(year)"
            }
        }
        promptLines.append(birthdayLine)

        promptLines.append("""
        
–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ (—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ‚Äî —Ç–µ–ø–ª–æ, –Ω–∞—á–∞–ª—å–Ω–∏–∫ ‚Äî —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–≥ ‚Äî –æ—Ç–∫—Ä—ã—Ç–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Ç.–¥.) –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∞ "—Ç—ã", –µ—Å–ª–∏ –Ω–µ —É–º–µ—Å—Ç–Ω–æ. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ.
""")

        let prompt = promptLines.joined(separator: "\n")
        let messages: [[String: String]] = [
            ["role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω—ã–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."],
            ["role": "user", "content": prompt]
        ]

        guard let url = URL(string: endpoint) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }

        var request = URLRequest(url: url)
        request.timeoutInterval = 240 // 4 –º–∏–Ω—É—Ç—ã
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let body: [String: Any] = [
            "model": model,
            "messages": messages,
            "max_tokens": 600,
            "temperature": 0.8
        ]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error))
            return
        }

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1)))
                return
            }

            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(.success(content.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    completion(.failure(NSError(domain: message, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }

        task.resume()
    }
}

    
