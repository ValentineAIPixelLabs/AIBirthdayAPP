import Foundation
import UIKit

final class ChatGPTService {
    static let shared = ChatGPTService()
    private let endpoint = "https://api.openai.com/v1/chat/completions"
    private let model = "gpt-3.5-turbo"
    
    private init() {}

    // MARK: - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è

    func generateGreeting(for contact: Contact, appleId: String, completion: @escaping (Result<String, Error>) -> Void) {
        // 1. –§–æ—Ä–º–∏—Ä—É–µ–º prompt –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        var ageString = ""
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year {
            let age = currentYear - year
            ageString = "–í–æ–∑—Ä–∞—Å—Ç: \(age)"
        }
        
        var promptLines = ["–°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n"]
        promptLines.append("–ò–º—è: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty { promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname)") }
        if !ageString.isEmpty { promptLines.append(ageString) }
        if let relation = contact.relationType, !relation.isEmpty { promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation)") }
        if let occupation = contact.occupation, !occupation.isEmpty { promptLines.append("–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(occupation)") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { promptLines.append("–£–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏: \(hobbies)") }
        if let leisure = contact.leisure, !leisure.isEmpty { promptLines.append("–ö–∞–∫ –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: \(leisure)") }
        if let info = contact.additionalInfo, !info.isEmpty { promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(info)") }
        
        var birthdayLine = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: "
        if let birthday = contact.birthday,
           let day = birthday.day,
           let month = birthday.month {
            birthdayLine += "\(day).\(month)"
            if let year = birthday.year { birthdayLine += ".\(year)" }
        }
        promptLines.append(birthdayLine)
        
        promptLines.append("""
        
–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è \(contact.relationType ?? "—á–µ–ª–æ–≤–µ–∫–∞"). –°—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–º–µ—Å—Ç–Ω—ã–º: –µ—Å–ª–∏ —ç—Ç–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ‚Äî –±–æ–ª–µ–µ —Ç–µ–ø–ª–æ, –µ—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –±–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–æ –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç, –∫–æ–ª–ª–µ–≥–∞, —Ç–æ–≤–∞—Ä–∏—â—å - —Ç–∞–∫–∂–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –Ω–µ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ, –µ—Å–ª–∏ –¥—Ä—É–≥ ‚Äî –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–∏—à–∫–æ–º —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –º–∞–ª–æ–∑–Ω–∞–∫–æ–º—ã—Ö –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "—Ç—ã" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
""")
        promptLines.append("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ.")

        let prompt = promptLines.joined(separator: "\n")
        
        // 2. –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ —Å–≤–æ–µ–º—É —Å–µ—Ä–≤–µ—Ä—É
        guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate") else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        let body: [String: Any] = [
            "apple_id": appleId,
            "prompt": prompt,
            "type": "birthday"
        ]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error)); return
        }
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error { completion(.failure(error)); return }
            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1))); return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let success = json["success"] as? Bool, success,
                   let result = json["result"] as? String {
                    completion(.success(result.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let errorMsg = json["error"] as? String {
                    completion(.failure(NSError(domain: errorMsg, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
    
    // MARK: - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ (prompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–æ View!)
    func generateCard(for contact: Contact, prompt: String, apiKey: String, quality: String, referenceImage: UIImage? = nil, size: String, completion: @escaping () -> Void) {
        let finalPrompt = prompt
        print("üß† Final image prompt: \n\(finalPrompt)")
        var referenceImageData: Data? = nil
        if let referenceImage = referenceImage,
           let imageData = referenceImage.jpegData(compressionQuality: 0.92) {
            referenceImageData = imageData
        }
        self.requestImageGeneration(prompt: finalPrompt, apiKey: apiKey, contactId: contact.id, quality: quality, referenceImageData: referenceImageData, size: size, completion: completion)
    }

    private func requestImageGeneration(prompt: String, apiKey: String, contactId: UUID, quality: String, referenceImageData: Data? = nil, size: String, completion: @escaping () -> Void) {
        if referenceImageData == nil {
            // –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
            guard let url = URL(string: "https://api.openai.com/v1/images/generations") else { return }
            var request = URLRequest(url: url)
            request.timeoutInterval = 240
            request.httpMethod = "POST"
            request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            let body: [String: Any] = [
                "model": "gpt-image-1",
                "prompt": prompt,
                "n": 1,
                "size": size,
                "quality": quality
            ]
            do {
                request.httpBody = try JSONSerialization.data(withJSONObject: body)
            } catch {
                DispatchQueue.main.async {
                    showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
                    completion()
                }
                return
            }
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    DispatchQueue.main.async {
                        showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
                        completion()
                    }
                    return
                }
                guard let data = data else {
                    DispatchQueue.main.async {
                        showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç OpenAI")
                        completion()
                    }
                    return
                }
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let dataArr = json["data"] as? [[String: Any]],
                       let base64String = dataArr.first?["b64_json"] as? String,
                       let imageData = Data(base64Encoded: base64String),
                       let image = UIImage(data: imageData) {
                        // JPEG –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                        let jpegData = image.jpegData(compressionQuality: 0.92)
                        let imageToSave = jpegData.flatMap { UIImage(data: $0) } ?? image
                        let newCardId = UUID()
                        let newCard = CardHistoryItem(id: newCardId, date: Date(), cardID: newCardId.uuidString)
                        CardHistoryManager.addCard(item: newCard, image: imageToSave, for: contactId)
                        DispatchQueue.main.async { completion() }
                        return
                    } else {
                        DispatchQueue.main.async {
                            showAlert(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                            completion()
                        }
                        return
                    }
                } catch {
                    DispatchQueue.main.async {
                        showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
                        completion()
                    }
                }
            }
            task.resume()
        } else {
            // –° —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º (image edit)
            guard let url = URL(string: "https://api.openai.com/v1/images/edits"),
                  let referenceImageData = referenceImageData else { return }
            var request = URLRequest(url: url)
            request.timeoutInterval = 240
            request.httpMethod = "POST"
            request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
            let boundary = "Boundary-\(UUID().uuidString)"
            request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
            var body = Data()
            // image
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"image\"; filename=\"reference.jpg\"\r\n".data(using: .utf8)!)
            body.append("Content-Type: image/jpeg\r\n\r\n".data(using: .utf8)!)
            body.append(referenceImageData)
            body.append("\r\n".data(using: .utf8)!)
            // prompt
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"prompt\"\r\n\r\n".data(using: .utf8)!)
            body.append(prompt.data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)
            // model
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"model\"\r\n\r\n".data(using: .utf8)!)
            body.append("gpt-image-1".data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)
            // n
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"n\"\r\n\r\n".data(using: .utf8)!)
            body.append("1".data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)
            // size
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"size\"\r\n\r\n".data(using: .utf8)!)
            body.append(size.data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)
            // quality
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"quality\"\r\n\r\n".data(using: .utf8)!)
            body.append(quality.data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)
            // finish
            body.append("--\(boundary)--\r\n".data(using: .utf8)!)
            request.httpBody = body
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    DispatchQueue.main.async {
                        showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
                        completion()
                    }
                    return
                }
                guard let data = data else {
                    DispatchQueue.main.async {
                        showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç OpenAI")
                        completion()
                    }
                    return
                }
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let dataArr = json["data"] as? [[String: Any]],
                       let base64String = dataArr.first?["b64_json"] as? String,
                       let imageData = Data(base64Encoded: base64String),
                       let image = UIImage(data: imageData) {
                        let newCardId = UUID()
                        let newCard = CardHistoryItem(id: newCardId, date: Date(), cardID: newCardId.uuidString)
                        CardHistoryManager.addCard(item: newCard, image: image, for: contactId)
                        DispatchQueue.main.async { completion() }
                        return
                    } else {
                        DispatchQueue.main.async {
                            showAlert(title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                            completion()
                        }
                        return
                    }
                } catch {
                    DispatchQueue.main.async {
                        showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
                        completion()
                    }
                }
            }
            task.resume()
        }
    }
    
    // MARK: - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º (–±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
    func generateHolidayGreeting(for holidayTitle: String, apiKey: String, completion: @escaping (Result<String, Error>) -> Void) {
        let prompt = """
        –°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, –¥—É—à–µ–≤–Ω–æ–µ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º "\(holidayTitle)" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ —É–∫–∞–∑—ã–≤–∞–π –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –∫–æ–ª–ª–µ–≥–∏, –∑–Ω–∞–∫–æ–º–æ–≥–æ, –¥—Ä—É–≥–∞). –°—Ç–∏–ª—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–∫.
        –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ.
        """
        let messages: [[String: String]] = [
            ["role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω—ã–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –ù–µ –æ–±—Ä—ã–≤–∞–π –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ."],
            ["role": "user", "content": prompt]
        ]
        guard let url = URL(string: endpoint) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }
        var request = URLRequest(url: url)
        request.timeoutInterval = 240
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        let body: [String: Any] = [
            "model": model,
            "messages": messages,
            "max_tokens": 600,
            "temperature": 0.8
        ]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error)); return
        }
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error { completion(.failure(error)); return }
            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1))); return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(.success(content.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    completion(.failure(NSError(domain: message, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
    
    // MARK: - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    func generateHolidayGreeting(for contact: Contact, holidayTitle: String, apiKey: String, completion: @escaping (Result<String, Error>) -> Void) {
        var promptLines = ["–°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º \"\(holidayTitle)\" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n"]
        promptLines.append("–ò–º—è: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty { promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname)") }
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year { promptLines.append("–í–æ–∑—Ä–∞—Å—Ç: \(currentYear - year)") }
        if let relation = contact.relationType, !relation.isEmpty { promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation)") }
        if let occupation = contact.occupation, !occupation.isEmpty { promptLines.append("–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(occupation)") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { promptLines.append("–£–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏: \(hobbies)") }
        if let leisure = contact.leisure, !leisure.isEmpty { promptLines.append("–ö–∞–∫ –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: \(leisure)") }
        if let info = contact.additionalInfo, !info.isEmpty { promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(info)") }
        var birthdayLine = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: "
        if let birthday = contact.birthday,
           let day = birthday.day,
           let month = birthday.month {
            birthdayLine += "\(day).\(month)"
            if let year = birthday.year { birthdayLine += ".\(year)" }
        }
        promptLines.append(birthdayLine)
        promptLines.append("""
        
–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ (—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ‚Äî —Ç–µ–ø–ª–æ, –Ω–∞—á–∞–ª—å–Ω–∏–∫ ‚Äî —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–≥ ‚Äî –æ—Ç–∫—Ä—ã—Ç–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Ç.–¥.) –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∞ "—Ç—ã", –µ—Å–ª–∏ –Ω–µ —É–º–µ—Å—Ç–Ω–æ. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ.
""")
        let prompt = promptLines.joined(separator: "\n")
        let messages: [[String: String]] = [
            ["role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω—ã–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."],
            ["role": "user", "content": prompt]
        ]
        guard let url = URL(string: endpoint) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1)))
            return
        }
        var request = URLRequest(url: url)
        request.timeoutInterval = 240
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        let body: [String: Any] = [
            "model": model,
            "messages": messages,
            "max_tokens": 600,
            "temperature": 0.8
        ]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error)); return
        }
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error { completion(.failure(error)); return }
            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1))); return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(.success(content.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    completion(.failure(NSError(domain: message, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }

    // MARK: - –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-4o)
    func generateCreativePrompt(for contact: Contact, apiKey: String, completion: @escaping (Result<String, Error>) -> Void) {
        var infoLines = [String]()
        infoLines.append("Name: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty { infoLines.append("Nickname: \(nickname)") }
        if let gender = contact.gender, !gender.isEmpty { infoLines.append("Gender: \(gender)") }
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year { infoLines.append("Age: \(currentYear - year)") }
        if let relation = contact.relationType, !relation.isEmpty { infoLines.append("Relation type: \(relation)") }
        if let occupation = contact.occupation, !occupation.isEmpty { infoLines.append("Occupation: \(occupation)") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { infoLines.append("Hobbies: \(hobbies)") }
        if let leisure = contact.leisure, !leisure.isEmpty { infoLines.append("Leisure: \(leisure)") }
        if let info = contact.additionalInfo, !info.isEmpty { infoLines.append("Additional Info: \(info)") }
        let infoBlock = infoLines.joined(separator: "\n")
        let systemPrompt = """
        –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é AI-–ø—Ä–æ–º—Ç–æ–≤, –ø—Ä–∏–¥—É–º—ã–≤–∞—é—â–∏–π –Ω–µ–æ–±—ã—á–Ω—ã–µ, –º–µ–º–Ω—ã–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–æ–∫ –≤ OpenAI gpt-image-1. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞. 

        –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –ø–æ–ª—è–º:
        ‚Äî Name, Nickname: –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π/–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Å–æ–∑–¥–∞–≤–∞–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∏–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏.
        ‚Äî Relation type: –æ–ø—Ä–µ–¥–µ–ª—è–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å—Ç–∏–ª—å —Å—Ü–µ–Ω—ã (—à—É—Ç–ª–∏–≤–æ, —Å–µ—Ä—å—ë–∑–Ω–æ, –¥—Ä—É–∂–µ—Å–∫–∏, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Ç.–¥.).
        ‚Äî Gender: –≤—ã–±–∏—Ä–∞–π –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è —á–µ–ª–æ–≤–µ–∫—É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞.
        ‚Äî Age: –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –º–æ–ª–æ–¥–æ–π ‚Äî –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –¥–µ—Ç—Å–∫–∏–µ –∏–ª–∏ –º–æ–ª–æ–¥—ë–∂–Ω—ã–µ —Ç–µ–º—ã, –µ—Å–ª–∏ –≤–∑—Ä–æ—Å–ª—ã–π ‚Äî –±–æ–ª–µ–µ –∑—Ä–µ–ª—ã–µ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–µ —Å—é–∂–µ—Ç—ã.
        ‚Äî Occupation, Hobbies, Leisure, Additional Info: —ç—Ç–æ –∫–ª—é—á –∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º, –æ—Å–Ω–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –æ—Ç–∫—Ä—ã—Ç–∫–∏.
        
        –í –∫–∞—á–µ—Å—Ç–≤–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∏–ª–∏ –æ–±—ä–µ–∫—Ç –∏–∑ –º–∏—Ä–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä—ã (–∫–∏–Ω–æ, —Å–µ—Ä–∏–∞–ª–æ–≤, –∏–≥—Ä, –º–µ–º–æ–≤, –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞).
        –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        –ù–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ò–º—è –∏ –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ –±—É–∫–≤–∞–ª—å–Ω–æ, –Ω–µ –æ–±—ä—è—Å–Ω—è–π –≤—ã–±–æ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏. 
        
        –ò—Å–ø–æ–ª—å–∑—É–π: —é–º–æ—Ä, —Å—é—Ä –∏ –Ω–∞—Ä—Ä–∞—Ç–∏–≤
        –ß—ë—Ç–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –∏—Ä–æ–Ω–∏—á–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞—Ä—Ä–∞—Ç–∏–≤:
        "–¥–≤–µ –∫–æ—à–∫–∏ –≤ –ø–ª–∞—â–µ –ø–æ–∫—É–ø–∞—é—Ç –º–æ–ª–æ–∫–æ", "Dwayne Johnson —Å–º–æ—Ç—Ä–∏—Ç –≤ –∑–µ—Ä–∫–∞–ª–æ –∏ –≤–∏–¥–∏—Ç –∫–∞–º–µ–Ω—å", "–≥–∏–ø–µ—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π facehugger –ø—Ä–æ–¥–∞—ë—Ç free hugs". 
        –°–º–µ–ª—ã–µ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã
        –ó–Ω–∞–º–µ–Ω–∏—Ç—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö:
        "Mr. Bean –∏ Gordon Ramsay –Ω–∞ –∫—É—Ö–Ω–µ"
        "–ú–æ–Ω–∞ –õ–∏–∑–∞ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ/–≤ –±–∞—Ä–µ/—Å–µ–ª—Ñ–∏" 
        –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–º–µ—â–µ–Ω—ã –≤ –Ω–µ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –∏–º —Å–µ—Ç—Ç–∏–Ω–≥ (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–ª–∞—Å—Å–∏–∫–µ, –Ω–∞–æ–±–æ—Ä–æ—Ç).
        –ë–µ—Ä–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞/–æ–±—ä–µ–∫—Ç –∏–∑ –∫—É–ª—å—Ç—É—Ä—ã + –Ω–µ–æ–±—ã—á–Ω—É—é/–∫–æ–º–∏—á–Ω—É—é/–Ω–µ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—É—é –¥–ª—è –Ω–µ–≥–æ —Å–∏—Ç—É–∞—Ü–∏—é.
        –î–æ–±–∞–≤–ª—è–π —á—ë—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
        –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ ‚Äî —Å—Ç–∏–ª—å, —Å–≤–µ—Ç, –∫–∞–º–µ—Ä–∞, —Ç–µ–∫—Å—Ç—É—Ä—ã.
        
        –¢–≤–æ–π –ø—Ä–æ–º—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (–¥–æ 120 —Å–ª–æ–≤), –æ–ø–∏—Å—ã–≤–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—É—é —Å—Ü–µ–Ω—É –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É:
        [–≥–µ—Ä–æ–π/–æ–±—ä–µ–∫—Ç/–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂], [–¥–µ–π—Å—Ç–≤–∏–µ/—Å–∏—Ç—É–∞—Ü–∏—è], [–ª–æ–∫–∞—Ü–∏—è], [–≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å], [—ç—Ñ—Ñ–µ–∫—Ç—ã/—Å–≤–µ—Ç/—Ä–∞–∫—É—Ä—Å], [—Ç–µ—Ö–Ω–∏–∫–∞/–∫–∞–º–µ—Ä–∞]. 
        """
        let userPrompt = """
        –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ:
        \(infoBlock)
        
        –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–∏, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ system prompt.
        """
        guard let url = URL(string: "https://api.openai.com/v1/chat/completions") else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1))); return
        }
        var request = URLRequest(url: url)
        request.timeoutInterval = 240
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        let messages: [[String: String]] = [
            ["role": "system", "content": systemPrompt],
            ["role": "user", "content": userPrompt]
        ]
        let body: [String: Any] = [
            "model": "gpt-4o",
            "messages": messages,
            "max_tokens": 300,
            "temperature": 0.95
        ]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error)); return
        }
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error { completion(.failure(error)); return }
            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: -1))); return
            }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(.success(content.trimmingCharacters(in: .whitespacesAndNewlines)))
                } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                          let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    completion(.failure(NSError(domain: message, code: -2)))
                } else {
                    completion(.failure(NSError(domain: "Unexpected response", code: -3)))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
}

// MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ UIAlert –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
private func showAlert(title: String, message: String) {
    if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
       let root = scene.windows.first?.rootViewController {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        root.present(alert, animated: true)
    }
}
