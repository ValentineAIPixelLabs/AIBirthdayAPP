import Foundation
import UIKit

final class ChatGPTService {
    static let shared = ChatGPTService()
    
    private init() {}

    // MARK: - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è

    // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: backend –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å appAccountToken –æ—Ç DeviceAccountManager
    func generateGreeting(for contact: Contact, completion: @escaping (Result<String, Error>) -> Void) {
        // 1. –§–æ—Ä–º–∏—Ä—É–µ–º prompt –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        var ageString = ""
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year {
            let age = currentYear - year
            ageString = "–í–æ–∑—Ä–∞—Å—Ç: \(age)"
        }

        var promptLines = ["–°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:"]
        promptLines.append("")
        promptLines.append("–ò–º—è: \(contact.name),")
        if let nickname = contact.nickname, !nickname.isEmpty { promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname),") }
        if !ageString.isEmpty { promptLines.append("\(ageString),") }
        if let relation = contact.relationType, !relation.isEmpty { promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation),") }
        if let occupation = contact.occupation, !occupation.isEmpty { promptLines.append("–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(occupation),") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { promptLines.append("–£–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏: \(hobbies),") }
        if let leisure = contact.leisure, !leisure.isEmpty { promptLines.append("–ö–∞–∫ –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: \(leisure),") }
        if let info = contact.additionalInfo, !info.isEmpty { promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(info),") }
        var birthdayLine = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: "
        if let birthday = contact.birthday,
           let day = birthday.day,
           let month = birthday.month {
            birthdayLine += "\(day).\(month)"
            if let year = birthday.year { birthdayLine += ".\(year)" }
        }
        promptLines.append("\(birthdayLine),")
        promptLines.append("")
        promptLines.append("""
–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è \(contact.relationType ?? "—á–µ–ª–æ–≤–µ–∫–∞"). –°—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–º–µ—Å—Ç–Ω—ã–º: –µ—Å–ª–∏ —ç—Ç–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ‚Äî –±–æ–ª–µ–µ —Ç–µ–ø–ª–æ, –µ—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –±–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–æ –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç, –∫–æ–ª–ª–µ–≥–∞, —Ç–æ–≤–∞—Ä–∏—â - —Ç–∞–∫–∂–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –Ω–µ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ, –µ—Å–ª–∏ –¥—Ä—É–≥ ‚Äî –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–∏—à–∫–æ–º —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –º–∞–ª–æ–∑–Ω–∞–∫–æ–º—ã—Ö –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "—Ç—ã" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
""")
        promptLines.append("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ.")
        let prompt = promptLines.joined(separator: "\n")
        
        // 2. –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ —Å–≤–æ–µ–º—É —Å–µ—Ä–≤–µ—Ä—É
        // –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –∞–∫—Ç–æ—Ä–µ (DeviceAccountManager –ø–æ–º–µ—á–µ–Ω @MainActor)
        DispatchQueue.main.async {
            let token = DeviceAccountManager.shared.appAccountToken()
            guard !token.isEmpty else {
                completion(.failure(self.missingTokenError()))
                return
            }
            guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate") else {
                completion(.failure(NSError(domain: "Invalid URL", code: -1)))
                return
            }
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            // –í —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏; –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ö–æ–¥–∏—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            let body: [String: Any] = [
                "prompt": prompt,
                "type": "birthday"
            ]
            do {
                request.httpBody = try JSONSerialization.data(withJSONObject: body)
            } catch {
                completion(.failure(error))
                return
            }
            // –ü–µ—Ä–µ–¥–∞—ë–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            request.setValue(token, forHTTPHeaderField: "X-App-Account-Token")
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    DispatchQueue.main.async { completion(.failure(error)) }
                    return
                }
                guard let data = data else {
                    DispatchQueue.main.async { completion(.failure(NSError(domain: "No data", code: -1))) }
                    return
                }
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let success = json["success"] as? Bool, success,
                       let result = json["result"] as? String {
                        DispatchQueue.main.async { completion(.success(result.trimmingCharacters(in: .whitespacesAndNewlines))) }
                    } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                              let errorMsg = json["error"] as? String {
                        DispatchQueue.main.async { completion(.failure(NSError(domain: errorMsg, code: -2))) }
                    } else {
                        DispatchQueue.main.async { completion(.failure(NSError(domain: "Unexpected response", code: -3))) }
                    }
                } catch {
                    DispatchQueue.main.async { completion(.failure(error)) }
                }
            }
            task.resume()
        }
    }
    
    // MARK: - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ (prompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–æ View!)
    // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: backend –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å appAccountToken –æ—Ç DeviceAccountManager
    func generateCard(for contact: Contact, prompt: String, quality: String, referenceImage: UIImage? = nil, size: String, completion: @escaping () -> Void) {
        let finalPrompt = prompt
        print("üß† Final image prompt: \n\(finalPrompt)")
        var referenceImageData: Data? = nil
        if let referenceImage = referenceImage,
           let imageData = referenceImage.jpegData(compressionQuality: 0.92) {
            referenceImageData = imageData
        }
        self.requestImageGeneration(prompt: finalPrompt, target: .contact(contact.id), quality: quality, referenceImageData: referenceImageData, size: size, completion: completion)
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫—É —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π (–∏–ª–∏ –±–µ–∑)
    func generateCardForHoliday(holidayId: UUID, holidayTitle: String, contact: Contact?, completion: @escaping () -> Void) {
        var promptLines: [String] = []

        if let contact = contact {
            promptLines.append("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–∏ –Ω–∞ —Ç–µ–º—É \"\(holidayTitle)\" —Å —É—á—ë—Ç–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ:")

            promptLines.append("–ò–º—è: \(contact.name)")
            if let nickname = contact.nickname, !nickname.isEmpty { promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname)") }
            if let gender = contact.gender, !gender.isEmpty { promptLines.append("–ü–æ–ª: \(gender)") }
            let calendar = Calendar.current
            let currentYear = calendar.component(.year, from: Date())
            if let year = contact.birthday?.year { promptLines.append("–í–æ–∑—Ä–∞—Å—Ç: \(currentYear - year)") }
            if let relation = contact.relationType, !relation.isEmpty { promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation)") }
            if let occupation = contact.occupation, !occupation.isEmpty { promptLines.append("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: \(occupation)") }
            if let hobbies = contact.hobbies, !hobbies.isEmpty { promptLines.append("–•–æ–±–±–∏: \(hobbies)") }
            if let leisure = contact.leisure, !leisure.isEmpty { promptLines.append("–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç –¥–æ—Å—É–≥: \(leisure)") }
            if let info = contact.additionalInfo, !info.isEmpty { promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: \(info)") }

            promptLines.append("–§–æ—Ä–º–∞—Ç: –æ—Ç–∫—Ä—ã—Ç–∫–∞ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, —è—Ä–∫–∞—è, –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è.")
        } else {
            promptLines.append("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–∏ –Ω–∞ —Ç–µ–º—É \"\(holidayTitle)\".")
            promptLines.append("–§–æ—Ä–º–∞—Ç: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞, —è—Ä–∫–∞—è, —Ü–∏—Ñ—Ä–æ–≤–∞—è, –ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.")
        }

        let prompt = promptLines.joined(separator: "\n")

        self.requestImageGeneration(prompt: prompt, target: .holiday(holidayId), completion: completion)
    }

    // MARK: - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏
    private enum SaveTarget {
        case contact(UUID)
        case holiday(UUID)
    }

    private func missingTokenError() -> NSError {
        NSError(domain: "DeviceAccountToken", code: -401, userInfo: [
            NSLocalizedDescriptionKey: String(localized: "auth.token.missing")
        ])
    }

    private func requestImageGeneration(prompt: String, target: SaveTarget, quality: String?, referenceImageData: Data? = nil, size: String?, completion: @escaping () -> Void) {
        DispatchQueue.main.async {
            let token = DeviceAccountManager.shared.appAccountToken()
            guard !token.isEmpty else {
                showAlert(
                    title: String(localized: "common.error"),
                    message: String(localized: "auth.token.missing")
                )
                completion()
                return
            }
            guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate_card_image") else { completion(); return }
            var request = URLRequest(url: url)
            request.timeoutInterval = 240
            request.httpMethod = "POST"

            let boundary = "Boundary-\(UUID().uuidString)"
            request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
            request.setValue(token, forHTTPHeaderField: "X-App-Account-Token")

            var body = Data()
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"prompt\"\r\n\r\n".data(using: .utf8)!)
            body.append(prompt.data(using: .utf8)!)
            body.append("\r\n".data(using: .utf8)!)
            if let quality = quality {
                body.append("--\(boundary)\r\n".data(using: .utf8)!)
                body.append("Content-Disposition: form-data; name=\"quality\"\r\n\r\n".data(using: .utf8)!)
                body.append(quality.data(using: .utf8)!)
                body.append("\r\n".data(using: .utf8)!)
            }
            if let size = size {
                body.append("--\(boundary)\r\n".data(using: .utf8)!)
                body.append("Content-Disposition: form-data; name=\"size\"\r\n\r\n".data(using: .utf8)!)
                body.append(size.data(using: .utf8)!)
                body.append("\r\n".data(using: .utf8)!)
            }
            if let referenceImageData = referenceImageData {
                body.append("--\(boundary)\r\n".data(using: .utf8)!)
                body.append("Content-Disposition: form-data; name=\"reference\"; filename=\"reference.jpg\"\r\n".data(using: .utf8)!)
                body.append("Content-Type: image/jpeg\r\n\r\n".data(using: .utf8)!)
                body.append(referenceImageData)
                body.append("\r\n".data(using: .utf8)!)
            }
            body.append("--\(boundary)--\r\n".data(using: .utf8)!)
            request.httpBody = body

            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    DispatchQueue.main.async {
                        showAlert(
                            title: String(localized: "common.error"),
                            message: error.localizedDescription
                        )
                        completion()
                    }
                    return
                }
                guard let data = data else {
                    DispatchQueue.main.async {
                        showAlert(
                            title: String(localized: "common.error"),
                            message: String(localized: "server.response.empty")
                        )
                        completion()
                    }
                    return
                }
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let success = json["success"] as? Bool, success,
                       let base64String = json["image"] as? String,
                       let imageData = Data(base64Encoded: base64String),
                       let image = UIImage(data: imageData) {
                        let jpegData = image.jpegData(compressionQuality: 0.92)
                        let imageToSave = jpegData.flatMap { UIImage(data: $0) } ?? image
                        let newCardId = UUID()
                        let newCard = CardHistoryItem(id: newCardId, date: Date(), cardID: newCardId.uuidString)
                        Task { @MainActor in
                            switch target {
                            case .contact(let id):
                                CardHistoryManager.addCard(item: newCard, image: imageToSave, for: id) {
                                    completion()
                                }
                            case .holiday(let id):
                                CardHistoryManager.addCardForHoliday(item: newCard, image: imageToSave, holidayId: id) {
                                    completion()
                                }
                            }
                        }
                    } else {
                        DispatchQueue.main.async {
                            showAlert(
                                title: String(localized: "gen.image.error.title"),
                                message: String(localized: "gen.image.error.body")
                            )
                            completion()
                        }
                    }
                } catch {
                    DispatchQueue.main.async {
                        showAlert(
                            title: String(localized: "common.error"),
                            message: error.localizedDescription
                        )
                        completion()
                    }
                }
            }
            task.resume()
        }
    }

    // MARK: - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (–±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞)
    private func requestImageGeneration(prompt: String, target: SaveTarget, completion: @escaping () -> Void) {
        self.requestImageGeneration(prompt: prompt, target: target, quality: nil, referenceImageData: nil, size: nil, completion: completion)
    }
    
    // MARK: - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º (–±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
    func generateHolidayGreeting(for holidayTitle: String, completion: @escaping (Result<String, Error>) -> Void) {
        let prompt = """
        –°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, –¥—É—à–µ–≤–Ω–æ–µ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º "\(holidayTitle)" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ —É–∫–∞–∑—ã–≤–∞–π –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –∫–æ–ª–ª–µ–≥–∏, –∑–Ω–∞–∫–æ–º–æ–≥–æ, –¥—Ä—É–≥–∞). –°—Ç–∏–ª—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–∫.
        –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–æ–Ω—á–∏ –º—ã—Å–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ.
        """

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–∞—à –±—ç–∫–µ–Ω–¥
        DispatchQueue.main.async {
            let token = DeviceAccountManager.shared.appAccountToken()
            guard !token.isEmpty else {
                completion(.failure(self.missingTokenError()))
                return
            }
            guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate") else {
                completion(.failure(NSError(domain: "Invalid URL", code: -1)))
                return
            }
            var request = URLRequest(url: url)
            request.timeoutInterval = 240
            request.httpMethod = "POST"
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            request.setValue(token, forHTTPHeaderField: "X-App-Account-Token")
            let body: [String: Any] = [
                "prompt": prompt,
                "type": "holiday"
            ]
            do {
                request.httpBody = try JSONSerialization.data(withJSONObject: body)
            } catch {
                completion(.failure(error))
                return
            }
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error { DispatchQueue.main.async { completion(.failure(error)) }; return }
                guard let data = data else {
                    DispatchQueue.main.async { completion(.failure(NSError(domain: "No data", code: -1))) }
                    return
                }
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let success = json["success"] as? Bool, success,
                       let result = json["result"] as? String {
                        DispatchQueue.main.async { completion(.success(result.trimmingCharacters(in: .whitespacesAndNewlines))) }
                    } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                              let errorMsg = json["error"] as? String {
                        DispatchQueue.main.async { completion(.failure(NSError(domain: errorMsg, code: -2))) }
                    } else {
                        DispatchQueue.main.async { completion(.failure(NSError(domain: "Unexpected response", code: -3))) }
                    }
                } catch {
                    DispatchQueue.main.async { completion(.failure(error)) }
                }
            }
            task.resume()
        }
    }
    
    // MARK: - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    func generateHolidayGreeting(for contact: Contact, holidayTitle: String, completion: @escaping (Result<String, Error>) -> Void) {
        var promptLines = ["–°–æ—Å—Ç–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º \"\(holidayTitle)\" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n"]
        promptLines.append("–ò–º—è: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty { promptLines.append("–ü—Ä–æ–∑–≤–∏—â–µ: \(nickname)") }
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year { promptLines.append("–í–æ–∑—Ä–∞—Å—Ç: \(currentYear - year)") }
        if let relation = contact.relationType, !relation.isEmpty { promptLines.append("–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: \(relation)") }
        if let occupation = contact.occupation, !occupation.isEmpty { promptLines.append("–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(occupation)") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { promptLines.append("–£–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏: \(hobbies)") }
        if let leisure = contact.leisure, !leisure.isEmpty { promptLines.append("–ö–∞–∫ –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: \(leisure)") }
        if let info = contact.additionalInfo, !info.isEmpty { promptLines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(info)") }
        var birthdayLine = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: "
        if let birthday = contact.birthday,
           let day = birthday.day,
           let month = birthday.month {
            birthdayLine += "\(day).\(month)"
            if let year = birthday.year { birthdayLine += ".\(year)" }
        }
        promptLines.append(birthdayLine)
        promptLines.append("""

–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ (—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ‚Äî —Ç–µ–ø–ª–æ, –Ω–∞—á–∞–ª—å–Ω–∏–∫ ‚Äî —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–≥ ‚Äî –æ—Ç–∫—Ä—ã—Ç–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Ç.–¥.) –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∞ "—Ç—ã", –µ—Å–ª–∏ –Ω–µ —É–º–µ—Å—Ç–Ω–æ. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ.
""")
        let prompt = promptLines.joined(separator: "\n")

        DispatchQueue.main.async {
            let token = DeviceAccountManager.shared.appAccountToken()
            guard !token.isEmpty else {
                completion(.failure(self.missingTokenError()))
                return
            }
            guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate") else {
                completion(.failure(NSError(domain: "Invalid URL", code: -1)))
                return
            }
            var request = URLRequest(url: url)
            request.timeoutInterval = 240
            request.httpMethod = "POST"
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            request.setValue(token, forHTTPHeaderField: "X-App-Account-Token")
            let body: [String: Any] = [
                "prompt": prompt,
                "type": "holiday_personal"
            ]
            do {
                request.httpBody = try JSONSerialization.data(withJSONObject: body)
            } catch {
                completion(.failure(error))
                return
            }
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error { DispatchQueue.main.async { completion(.failure(error)) }; return }
                guard let data = data else {
                    DispatchQueue.main.async { completion(.failure(NSError(domain: "No data", code: -1))) }
                    return
                }
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let success = json["success"] as? Bool, success,
                       let result = json["result"] as? String {
                        DispatchQueue.main.async { completion(.success(result.trimmingCharacters(in: .whitespacesAndNewlines))) }
                    } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                              let errorMsg = json["error"] as? String {
                        DispatchQueue.main.async { completion(.failure(NSError(domain: errorMsg, code: -2))) }
                    } else {
                        DispatchQueue.main.async { completion(.failure(NSError(domain: "Unexpected response", code: -3))) }
                    }
                } catch {
                    DispatchQueue.main.async { completion(.failure(error)) }
                }
            }
            task.resume()
        }
    }

    // MARK: - –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏
    func generateCreativePrompt(for contact: Contact, completion: @escaping (Result<String, Error>) -> Void) {
        var infoLines = [String]()
        infoLines.append("Name: \(contact.name)")
        if let nickname = contact.nickname, !nickname.isEmpty { infoLines.append("Nickname: \(nickname)") }
        if let gender = contact.gender, !gender.isEmpty { infoLines.append("Gender: \(gender)") }
        let calendar = Calendar.current
        let currentYear = calendar.component(.year, from: Date())
        if let year = contact.birthday?.year { infoLines.append("Age: \(currentYear - year)") }
        if let relation = contact.relationType, !relation.isEmpty { infoLines.append("Relation type: \(relation)") }
        if let occupation = contact.occupation, !occupation.isEmpty { infoLines.append("Occupation: \(occupation)") }
        if let hobbies = contact.hobbies, !hobbies.isEmpty { infoLines.append("Hobbies: \(hobbies)") }
        if let leisure = contact.leisure, !leisure.isEmpty { infoLines.append("Leisure: \(leisure)") }
        if let info = contact.additionalInfo, !info.isEmpty { infoLines.append("Additional Info: \(info)") }
        let infoBlock = infoLines.joined(separator: "\n")

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ DeviceAccountManager
        DispatchQueue.main.async {
            let token = DeviceAccountManager.shared.appAccountToken()
            guard !token.isEmpty else {
                completion(.failure(self.missingTokenError()))
                return
            }
            guard let url = URL(string: "https://aibirthday-backend.up.railway.app/api/generate_card_prompt") else {
                completion(.failure(NSError(domain: "Invalid URL", code: -1)))
                return
            }
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            // –í —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏; –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ö–æ–¥–∏—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            let body: [String: Any] = [
                "info_block": infoBlock
            ]
            do {
                request.httpBody = try JSONSerialization.data(withJSONObject: body)
            } catch {
                completion(.failure(error))
                return
            }
            // –ü–µ—Ä–µ–¥–∞—ë–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            request.setValue(token, forHTTPHeaderField: "X-App-Account-Token")
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error { DispatchQueue.main.async { completion(.failure(error)) }; return }
                guard let data = data else {
                    DispatchQueue.main.async { completion(.failure(NSError(domain: "No data", code: -1))) }
                    return
                }
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let success = json["success"] as? Bool, success,
                       let result = json["result"] as? String {
                        DispatchQueue.main.async { completion(.success(result.trimmingCharacters(in: .whitespacesAndNewlines))) }
                    } else if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                              let errorMsg = json["error"] as? String {
                        DispatchQueue.main.async { completion(.failure(NSError(domain: errorMsg, code: -2))) }
                    } else {
                        DispatchQueue.main.async { completion(.failure(NSError(domain: "Unexpected response", code: -3))) }
                    }
                } catch {
                    DispatchQueue.main.async { completion(.failure(error)) }
                }
            }
            task.resume()
        }
    }
}

// MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ UIAlert –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
private func showAlert(title: String, message: String) {
    if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
       let root = scene.windows.first?.rootViewController {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: String(localized: "common.ok"), style: .default))
        root.present(alert, animated: true)
    }
}
