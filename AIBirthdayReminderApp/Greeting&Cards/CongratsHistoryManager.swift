import Foundation
import CoreData



@MainActor
final class CongratsHistoryManager {
    private static var viewContext: NSManagedObjectContext {
        CoreDataManager.shared.viewContext
    }

    /// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
    static func addCongrats(item: CongratsHistoryItem, for contactId: UUID) {
        CoreDataManager.shared.performBackgroundTask(author: "addCongrats") { ctx in
            // –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            let request: NSFetchRequest<ContactEntity> = ContactEntity.fetchRequest()
            request.fetchLimit = 1
            request.predicate = NSPredicate(format: "id == %@", contactId as CVarArg)

            do {
                guard let contact = try ctx.fetch(request).first else {
                    print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (id=\(contactId))")
                    return
                }

                // Upsert –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É (id)
                let req: NSFetchRequest<CongratsHistoryEntity> = CongratsHistoryEntity.fetchRequest()
                req.fetchLimit = 1
                req.predicate = NSPredicate(format: "id == %@", item.id as CVarArg)

                let entity = try ctx.fetch(req).first ?? {
                    let e = CongratsHistoryEntity(context: ctx)
                    e.id = item.id
                    return e
                }()
                entity.date = item.date
                entity.message = item.message
                entity.holidayID = nil
                entity.contact = contact
                try ctx.save()
                print("‚úÖ Core Data: bgContext(addCongrats) —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            } catch {
                assertionFailure("‚ùå addCongrats fetch contact error: \(error)")
            }
        }
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ id –∫–æ–Ω—Ç–∞–∫—Ç–∞
    static func getCongrats(for contactId: UUID) -> [CongratsHistoryItem] {
        let request: NSFetchRequest<CongratsHistoryEntity> = CongratsHistoryEntity.fetchRequest()
        request.predicate = NSPredicate(format: "contact.id == %@", contactId as CVarArg)
        request.sortDescriptors = [NSSortDescriptor(key: "date", ascending: false)]
        request.fetchBatchSize = 50

        do {
            let results = try viewContext.fetch(request)
            return results.map {
                CongratsHistoryItem(
                    id: $0.id ?? UUID(),
                    date: $0.date ?? Date(),
                    message: $0.message ?? ""
                )
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π: \(error)")
            return []
        }
    }

    /// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫—É (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É)
    static func addCongratsForHoliday(item: CongratsHistoryItem, holidayId: UUID) {
        CoreDataManager.shared.performBackgroundTask(author: "addCongratsHoliday") { ctx in
            do {
                // Upsert –ø–æ id, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                let req: NSFetchRequest<CongratsHistoryEntity> = CongratsHistoryEntity.fetchRequest()
                req.fetchLimit = 1
                req.predicate = NSPredicate(format: "id == %@", item.id as CVarArg)

                let existing = try ctx.fetch(req).first
                let target: CongratsHistoryEntity = existing ?? {
                    let e = CongratsHistoryEntity(context: ctx)
                    e.id = item.id
                    return e
                }()
                target.date = item.date
                target.message = item.message
                target.holidayID = holidayId
                target.contact = nil

                try ctx.save()
                print("‚úÖ Core Data: bgContext(addCongratsHoliday) —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            } catch {
                assertionFailure("‚ùå addCongratsForHoliday error: \(error)")
            }
        }
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ id –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    static func getCongrats(forHoliday holidayId: UUID) -> [CongratsHistoryItem] {
        let request: NSFetchRequest<CongratsHistoryEntity> = CongratsHistoryEntity.fetchRequest()
        request.predicate = NSPredicate(format: "holidayID == %@", holidayId as CVarArg)
        request.sortDescriptors = [NSSortDescriptor(key: "date", ascending: false)]
        request.fetchBatchSize = 50

        do {
            let results = try viewContext.fetch(request)
            return results.map {
                CongratsHistoryItem(
                    id: $0.id ?? UUID(),
                    date: $0.date ?? Date(),
                    message: $0.message ?? ""
                )
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫—É: \(error)")
            return []
        }
    }

    /// –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ id
    static func deleteCongrats(_ id: UUID) {
        CoreDataManager.shared.performBackgroundTask(author: "deleteCongrats") { ctx in
            let request: NSFetchRequest<CongratsHistoryEntity> = CongratsHistoryEntity.fetchRequest()
            request.fetchLimit = 1
            
            request.predicate = NSPredicate(format: "id == %@", id as CVarArg)
            
            do {
                if let entity = try ctx.fetch(request).first {
                    print("üóëÔ∏è ‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: \(id)")
                    ctx.delete(entity)
                    try ctx.save()
                    print("üóë –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: \(id)")
                } else {
                    print("üóëÔ∏è ‚ùå –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: \(id)")
                }
            } catch {
                assertionFailure("‚ùå deleteCongrats fetch/save error: \(error)")
            }
        }
    }
    // MARK: - Helpers
    private static func fetchCongrats(by id: UUID, in ctx: NSManagedObjectContext) throws -> CongratsHistoryEntity? {
        let req: NSFetchRequest<CongratsHistoryEntity> = CongratsHistoryEntity.fetchRequest()
        req.fetchLimit = 1
        req.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        return try ctx.fetch(req).first
    }
}
